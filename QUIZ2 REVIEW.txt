Q1. Which of the following vertices will be visited by breadth-first search (BFS) before the goal is reached?
BFS explores all nodes layer by layer, expanding outwards from the start node. It explores nodes in order of increasing distance from the start.

V1: Directly adjacent to the start (S), so it will be visited.
V2: One move to the left from the start (S), so it will be visited.
V3: Though somewhat distant, BFS will explore all nearby nodes before the goal is reached.
V4: This is somewhat further away, but BFS may visit it depending on the order of expansion.
Correct answers: V1, V2, V3, V4

Q2. Which of the following vertices will be visited by Dijkstra's algorithm before the goal is reached?
Dijkstra's algorithm visits all nodes in increasing order of their cost from the start. Since all nodes are reachable and the algorithm doesn't have a heuristic to favor any specific direction, it will visit all possible nodes that could lead to the goal.

Correct answers: V1, V2, V3, V4

**********************
Q3. Which of the following vertices will be visited by A search using the Euclidean distance (L2 norm) heuristic before the goal is reached?*
A* with the Euclidean distance heuristic will prioritize nodes that are closer to the goal in straight-line distance. Nodes closer to the diagonal path between the start and goal are more likely to be visited.

V1: It is adjacent to the start and directly along the path to the goal, so it will be visited.
V2: It's slightly closer to the goal than some other nodes, so it might be visited.
V3: It is further off the direct path but might be visited based on the search pattern.
V4: Likely won't be visited since it's off the straight-line path between start and goal.
Correct answers: V1, V2, V3

CORRECTION: Q3. Which of the following vertices will be visited by A search using the Euclidean distance (L2 norm) heuristic before the goal is reached?*
The correct answer is V1. While initially, it might seem like other vertices could be explored, A* with the Euclidean distance heuristic focuses sharply on the direct path from the start to the goal. V1 is the most relevant in this case, being on the path between the start and the goal.
Correct answer: V1
***********************************

Q4. Is the Manhattan distance (|x1 - x2| + |y1 - y2|) an admissible heuristic in this domain?
Since diagonal movements are allowed and Manhattan distance only counts horizontal and vertical moves, it will underestimate the true cost when diagonal movements are optimal. Therefore, it is not admissible in an eight-connected grid.

Correct answer: No

******************************************
Q5. Will A search using the Manhattan distance heuristic find the optimal path in this problem, with the specified start and goal?*
Because Manhattan distance underestimates the cost in an eight-connected grid (where diagonal moves are more expensive), A* may not find the optimal path.

Correct answer: No

CORRECTION Q5. Will A search using the Manhattan distance heuristic find the optimal path in this problem, with the specified start and goal?*
The answer here is Yes. Even though the domain allows diagonal movement, the Manhattan distance heuristic will still work because the grid is fairly open without obstacles that would cause Manhattan distance to lead to suboptimal choices. In an eight-connected grid, Manhattan distance is not always admissible, but in this specific case, the path can still be optimal.
Correct answer: Yes
******************************************

*************************************
Q6. Among the labeled vertices, which one will be explored first by breadth-first search?
BFS explores all nodes at the same distance from the start in a layer-by-layer fashion. Since V1 is the closest to the start, it will be explored first.

Correct answer: V1

CORRECTION:Q6. Among the labeled vertices, which one will be explored first by breadth-first search?
The correct answer is V2. Since BFS explores nodes layer by layer in terms of distance from the start, and V2 is directly to the left of the start, it is closer to the start than other labeled nodes. While V1 is adjacent, BFS explores in a specific neighbor order, and in this case, V2 is explored first.
Correct answer: V2
***************************************

*********************************************
Q7. Among the labeled vertices, which one will be explored first by Dijkstra's algorithm?
Dijkstra's algorithm always explores the vertex with the lowest cost from the start. Since V1 is directly adjacent to the start, it has the lowest cost and will be explored first.

Correct answer: V1

CORRECTIONQ7. Among the labeled vertices, which one will be explored first by Dijkstra's algorithm?
The correct answer is V2. Like BFS, Dijkstra's algorithm will prioritize vertices based on their distance from the start. In this case, V2 will be explored first since it is directly adjacent to the start and has a low-cost edge leading to it.
Correct answer: V2
**************************************************



Q8. Among the labeled vertices, which one will be explored first by A using the Euclidean distance (L2 norm) heuristic?*
A* with the Euclidean distance heuristic will explore nodes based on their proximity to both the start and goal. V1 is the closest to the start and lies along the path to the goal, so it will be explored first.

Correct answer: V1


****************************************
Q9. Which of the following are true for RRTs?
Probabilistically optimal: RRT* (a variant of RRT) can become optimal with infinite samples.
Given infinite samples, if a solution exists it will find it: RRT will eventually find a solution if one exists, but it may not be optimal without using RRT*.
Correct answers: They are probabilistically optimal, Given infinite samples, if a solution exists it will find it.

CORRECTION: Q9. Which of the following are true for RRTs?
The correct answer is: Given infinite samples, if a solution exists it will find it. While RRT is not guaranteed to find the optimal solution, it is capable of finding a solution if one exists given infinite time or samples.
Correct answer: Given infinite samples, if a solution exists it will find it
**************************************************

Q10. Which of the following are true for PRMs?
Given infinite samples, if no solution is found, then that means there is no solution: PRMs will connect all reachable nodes, so if a solution is not found, no path exists.
Given infinite samples, if a solution exists it will find it: PRMs will eventually find a path if one exists with infinite samples.
Correct answers: Given infinite samples, if no solution is found, then that means there is no solution, Given infinite samples, if a solution exists it will find it.


****************************************
Q11. If breadth-first search operates on a four-connected grid and explores neighbors in a counter-clockwise order starting from the neighbor "Up", then
-The exploration order will be deterministic: BFS follows a strict exploration pattern, so the order will always be the same.
-Is guaranteed to find the solution with the fewest number of steps 
-Is guaranteed to find a solution if one exists: BFS explores all possible paths and is guaranteed to find a solution if one exists.
Correct answers: The exploration order will be deterministic, Is guaranteed to find the solution with the fewest number of steps, Is guaranteed to find a solution if one exists
********************************************



Q12. Consider A search on a four-connected grid. Which of the following heuristics h(v) are admissible in this setting?*
An admissible heuristic must never overestimate the true cost.

h(v) = sqrt((v.x - g.x)^2 + (v.y - g.y)^2): This is the Euclidean distance and is admissible.
h(v) = abs(v.x - g.x) + abs(v.y - g.y): This is the Manhattan distance and is also admissible in a four-connected grid.
h(v) = abs(v.x - g.x) and h(v) = abs(v.y - g.y): Both of these are admissible as they never overestimate.
h(v) = 0: This is trivially admissible since it never overestimates the true cost.
Correct answers: All the heuristics listed are admissible.



*************************************************
(refer to grid)
Q13. Which vertices can be pruned in Jump-Point Search (JPS)?
JPS prunes nodes that are unnecessary to explore, i.e., when going directly from the parent node is less costly or equivalent to going through an intermediate node. In this scenario:

V2, V3, V4, V5, V6, and V8 can all be pruned.
Correct answers: V2, V3, V4, V5, V6, V8

CORRECTION: Q13. We would like to apply jump-point search (JPS) to this grid. Consider the scenario where v1 is being evaluated, with v9 as its parent. Which vertices can be pruned?
The correct answers are: V2, V3, V4, V6, V7, V8. These vertices can be pruned because JPS tries to avoid exploring redundant paths. If a direct connection between V9 and any of these vertices is shorter than going through V1, they will be pruned.
Correct answers: V2, V3, V4, V6, V7, V8
***************************************************


*********************************************************
(refer to grid)
Q14. Which vertices would be forced neighbors if some other vertices were blocked?
Forced neighbors are nodes that must be explored if obstacles block other possible paths. In this case, forced neighbors might include:

V2, V4, V6, and V8 could become forced neighbors if other paths are blocked.
Correct answers: V2, V4, V6, V8

CORRECTION: Q14. Which vertices would be forced neighbors if some other vertices were blocked?
The correct answers are: V4, V6. These vertices would be forced neighbors if obstacles block other paths, meaning that the algorithm would have no choice but to explore them to reach the goal.
Correct answers: V4, V6
****************************************************************************